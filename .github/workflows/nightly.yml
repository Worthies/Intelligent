name: Nightly Build

on:
  schedule:
    # Run nightly at 2 AM UTC (adjust timezone as needed)
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
    inputs:
      version_suffix:
        description: 'Version suffix (e.g., alpha, beta, rc1)'
        required: false
        default: 'nightly'

env:
  GO_VERSION: '1.21'
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with race detector
        run: go test -race -v ./...

      # - name: Check for vulnerabilities
      #   run: |
      #     go install golang.org/x/vuln/cmd/govulncheck@latest
      #     govulncheck ./...

  build:
    name: Build Multi-Platform Binaries
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            suffix: linux-amd64
          - os: linux
            arch: arm64
            suffix: linux-arm64
          - os: windows
            arch: amd64
            suffix: windows-amd64.exe
          - os: darwin
            arch: amd64
            suffix: darwin-amd64
          - os: darwin
            arch: arm64
            suffix: darwin-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get version info
        id: version
        run: |
          # Generate version based on date and commit
          VERSION_DATE=$(date +%Y.%m.%d)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          VERSION_SUFFIX="${{ github.event.inputs.version_suffix || 'nightly' }}"
          VERSION="${VERSION_DATE}-${VERSION_SUFFIX}.${COMMIT_SHORT}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Set binary name based on OS
          BINARY_NAME="intelligent"
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="intelligent.exe"
          fi
          
          # Build with version information
          go build -ldflags "-X main.version=${VERSION} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=$(git rev-parse HEAD)" -o "${BINARY_NAME}" .
          
          # Create release archive
          ARCHIVE_NAME="intelligent-${VERSION}-${{ matrix.suffix }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip "${ARCHIVE_NAME}.zip" "${BINARY_NAME}" README.md LICENSE
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" "${BINARY_NAME}" README.md LICENSE
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: intelligent-${{ matrix.suffix }}
          path: |
            intelligent-*-${{ matrix.suffix }}.*
          retention-days: 30

  # docker:
  #   name: Build Docker Image
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Get version info
  #       id: version
  #       run: |
  #         VERSION_DATE=$(date +%Y.%m.%d)
  #         COMMIT_SHORT=$(git rev-parse --short HEAD)
  #         VERSION_SUFFIX="${{ github.event.inputs.version_suffix || 'nightly' }}"
  #         VERSION="${VERSION_DATE}-${VERSION_SUFFIX}.${COMMIT_SHORT}"
  #         BUILD_TIME=$(TZ=UTC date +%Y-%m-%dT%H:%M:%SZ)
  #         IMAGE_NAME="`echo ${{ github.repository }} | tr [A-Z] [a-z]`"
  #         echo "version=${VERSION}" >> $GITHUB_OUTPUT
  #         echo "build_time=${BUILD_TIME}" >> $GITHUB_OUTPUT
  #         echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
  #         echo -e "Version: ${VERSION}\nBuild Time: ${BUILD_TIME}\nImage Name: ${IMAGE_NAME}"

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         platforms: linux/amd64,linux/arm64
  #         push: true
  #         tags: |
  #           ghcr.io/${{ steps.version.outputs.image_name }}:nightly
  #           ghcr.io/${{ steps.version.outputs.image_name }}:${{ steps.version.outputs.version }}
  #         build-args: |
  #           VERSION=${{ steps.version.outputs.version }}
  #           BUILD_TIME=${{ steps.version.outputs.build_time }}
  #           GIT_COMMIT=${{ github.sha }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  release:
    name: Create Nightly Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version info
        id: version
        run: |
          VERSION_DATE=$(date +%Y.%m.%d)
          COMMIT_SHORT=$(git rev-parse --short HEAD)
          VERSION_SUFFIX="${{ github.event.inputs.version_suffix || 'nightly' }}"
          VERSION="${VERSION_DATE}-${VERSION_SUFFIX}.${COMMIT_SHORT}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Organize artifacts
        run: |
          mkdir -p release
          find ./artifacts -name "intelligent-*" -type f -exec cp {} ./release/ \;
          ls -la ./release/

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          # Intelligent HTTP Server Nightly Build - ${{ steps.version.outputs.version }}
          
          🌙 **Nightly build** created from commit [`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          
          ## What's Changed
          - Latest features and bug fixes from the main branch
          - Built with Go ${{ env.GO_VERSION }}
          - All tests passing ✅
          
          ## Downloads
          
          ### Binaries
          - **Linux AMD64**: `intelligent-${{ steps.version.outputs.version }}-linux-amd64.tar.gz`
          - **Linux ARM64**: `intelligent-${{ steps.version.outputs.version }}-linux-arm64.tar.gz`
          - **macOS AMD64**: `intelligent-${{ steps.version.outputs.version }}-darwin-amd64.tar.gz`
          - **macOS ARM64** (Apple Silicon): `intelligent-${{ steps.version.outputs.version }}-darwin-arm64.tar.gz`
          - **Windows AMD64**: `intelligent-${{ steps.version.outputs.version }}-windows-amd64.exe.zip`
          
          ### Docker Image
          ```bash
          docker pull ghcr.io/${{ github.repository }}:nightly
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          ```
          
          ## Installation
          
          ### Binary Installation
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Move the `intelligent` binary to your PATH
          4. Run `intelligent --help` to verify installation
          
          ### Docker Usage
          ```bash
          # Run directly
          docker run --rm ghcr.io/${{ github.repository }}:nightly --help
          
          # Interactive shell
          docker run --rm -it ghcr.io/${{ github.repository }}:nightly
          ```
          
          ## ⚠️ Important Notes
          - This is a **nightly build** - may contain unstable features
          - Not recommended for production use
          - Use official releases for stable deployments
          - Nightly builds are automatically deleted after 30 days
          
          ---
          *Built on $(date -u)*
          EOF
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Delete existing nightly release
        continue-on-error: true
        run: |
          # Delete existing nightly release if it exists
          gh release delete nightly --yes || true
          git push --delete origin nightly || true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create nightly release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: nightly
          name: "Nightly Build (${{ steps.version.outputs.version }})"
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: ./release/*
          prerelease: true
          make_latest: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Build Status
    needs: [test, build, release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ Nightly build completed successfully!"
          echo "📦 Binaries built for all platforms"
          echo " Release created"

      - name: Notify failure
        if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ Nightly build failed!"
          echo "Please check the logs for details"
          exit 1